# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

type User {
  id: ID!
  fullName: String!
  email: String!
  roles: [String!]!
  isActive: Boolean!
  lastUpdateBy: User
}

type AuthResponse {
  token: String!
  user: User!
}

type Departament {
  id: ID!
  name: String!
  isActive: Boolean!
  createdAt: Float!
  updatedAt: Float!
  lastUpdateBy: User
}

type Proyect {
  id: ID!
  code: Int!
  name: String!
  isActive: Boolean!
  createdAt: Float!
  updatedAt: Float!
  lastUpdateBy: User
}

type Product {
  id: ID!
  productTypeOne: ProductType!
  name: String!
  serial: String!
  color: String!
  mark: String!
  model: String!
  isActive: Boolean!
  createdAt: Float!
  updatedAt: Float!
  lastUpdateBy: User
}

type ProductType {
  id: ID!
  name: String!
  isActive: Boolean!
  createdAt: Float!
  updatedAt: Float!
  products: [Product!]!
  lastUpdateBy: User
}

type ProductContained {
  id: ID!
  product: Product!
  contained: Product!
  createdAt: Float!
  updatedAt: Float!
  lastUpdateBy: User
}

type Query {
  userFindall(roles: [ValidRoles!] = [], offset: Int = 0, limit: Int = 10, search: String): [User!]!
  userFindOne(id: ID!): User!
  authrevalidate: AuthResponse!
  departamentFindAll(offset: Int = 0, limit: Int = 10, search: String): [Departament!]!
  departamentFindOne(id: ID!): Departament!
  proyectfindAll(offset: Int = 0, limit: Int = 10, search: String): [Proyect!]!
  proyectfindOne(id: ID!): Proyect!
  productTypefindAll(offset: Int = 0, limit: Int = 10, search: String): [ProductType!]!
  productTypefindOne(id: ID!): ProductType!
  productfindAll(offset: Int = 0, limit: Int = 10, search: String): [Product!]!
  productfindOne(id: ID!): Product!
  productContained(id: Int!): ProductContained!
}

"""Roles de usuarios validos"""
enum ValidRoles {
  admin
  user
  superUser
}

type Mutation {
  userUpdate(updateUserInput: UpdateUserInput!): User!
  userBlock(id: ID!): User!
  userResetPass(resetpassInput: ResetPassInput!): User!
  authsignup(signupInput: SignupInput!): AuthResponse!
  authlogin(loginInput: LoginInput!): AuthResponse!
  departamentCreate(createDepartamentInput: CreateDepartamentInput!): Departament!
  departamentUpdate(updateDepartamentInput: UpdateDepartamentInput!): Departament!
  departamentRemove(id: ID!): Departament!
  proyectCreate(createProyectInput: CreateProyectInput!): Proyect!
  proyectUpdate(updateProyectInput: UpdateProyectInput!): Proyect!
  proyectRemove(id: ID!): Proyect!
  productTypeCreate(createProductTypeInput: CreateProductTypeInput!): ProductType!
  productTypeUpdate(updateProductTypeInput: UpdateProductTypeInput!): ProductType!
  productTypeRemove(id: ID!): ProductType!
  productCreate(createProductInput: CreateProductInput!): Product!
  productUpdate(updateProductInput: UpdateProductInput!): Product!
  productRemove(id: ID!): Product!
  createProductContained(createProductContainedInput: CreateProductContainedInput!): ProductContained!
  updateProductContained(updateProductContainedInput: UpdateProductContainedInput!): ProductContained!
  removeProductContained(id: Int!): ProductContained!
}

input UpdateUserInput {
  email: String
  fullName: String
  color: String
  password: String
  id: ID!
  roles: [ValidRoles!]
  isActive: Boolean
}

input ResetPassInput {
  id: ID!
  password: String!
}

input SignupInput {
  email: String!
  fullName: String!
  password: String!
}

input LoginInput {
  email: String!
  password: String!
}

input CreateDepartamentInput {
  name: String!
}

input UpdateDepartamentInput {
  name: String
  id: ID!
  isActive: Boolean
}

input CreateProyectInput {
  code: Int!
  name: String!
}

input UpdateProyectInput {
  code: Int
  name: String
  id: ID!
  isActive: Boolean
}

input CreateProductTypeInput {
  name: String!
}

input UpdateProductTypeInput {
  name: String
  id: ID!
  isActive: Boolean
}

input CreateProductInput {
  name: String!
  productTypeOne: ID!
  serial: String
  color: String
  mark: String
  model: String
}

input UpdateProductInput {
  name: String
  productTypeOne: ID
  serial: String
  color: String
  mark: String
  model: String
  id: ID!
  isActive: Boolean
}

input CreateProductContainedInput {
  """Example field (placeholder)"""
  exampleField: Int!
}

input UpdateProductContainedInput {
  """Example field (placeholder)"""
  exampleField: Int
  id: Int!
}